import React, { useState, useEffect, useRef, useCallback } from "react";
import { Flex, Text, Paper } from "@mantine/core";
import dayjs from "dayjs";
import { useUser, useMessagesContext } from "@hooks";
import { api } from "@api";
import { getLanguageByKey, MESSAGES_STATUS } from "@utils";
import { Spin } from "@components";
import { YYYY_MM_DD_HH_mm_ss } from "@app-constants";
import { ChatInput } from "../ChatInput";
import TaskListOverlay from "../../../Task/TaskListOverlay";
import { GroupedMessages } from "../GroupedMessages";
import { InlineNoteComposer } from "../../../InlineNoteComposer";
import { TicketParticipants } from "../../../TicketParticipants";
import { getPageIdByPlatformAndGroup } from "../../../../constants/webhookPagesConfig";
import "./ChatMessages.css";

const getSendedMessage = (msj, currentMsj, statusMessage) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ –∫–ª—é—á–µ–≤—ã–º –ø–æ–ª—è–º
  const isExactMatch = msj.sender_id === currentMsj.sender_id &&
    msj.message === currentMsj.message &&
    msj.time_sent === currentMsj.time_sent &&
    msj.ticket_id === currentMsj.ticket_id;

  if (isExactMatch) {
    return { ...msj, messageStatus: statusMessage };
  }

  // Fallback: –∏—â–µ–º PENDING —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–æ–º –∂–µ —Ç–∏–∫–µ—Ç–µ
  const isPendingMatch = msj.sender_id === currentMsj.sender_id &&
    msj.ticket_id === currentMsj.ticket_id &&
    msj.messageStatus === MESSAGES_STATUS.PENDING;

  if (isPendingMatch) {
    console.log("üîÑ Found PENDING message for status update:", {
      from: "PENDING",
      to: statusMessage,
      message: msj.message?.substring(0, 50) + "..."
    });
    return { ...msj, messageStatus: statusMessage };
  }

  return msj;
};

const ChatMessagesComponent = ({
  ticketId,
  selectedClient,
  personalInfo,
  platformOptions,
  selectedPlatform,
  changePlatform,
  contactOptions,
  changeContact,
  selectedPageId,
  changePageId,
  loading,
  technicians,
  unseenCount = 0,
  renderStage = { tasksReady: true, messagesReady: true } // defaults for backwards compatibility
}) => {
  const { userId } = useUser();

  const {
    setMessages,
    getUserMessages,
    loading: messagesLoading,
    messages,
    notes: apiNotesFromCtx = [],
  } = useMessagesContext();

  const messageContainerRef = useRef(null);
  const contentRef = useRef(null);
  const [isUserAtBottom, setIsUserAtBottom] = useState(true);
  const [creatingTask, setCreatingTask] = useState(false);

  const [noteMode, setNoteMode] = useState(false);
  const [noteSaving, setNoteSaving] = useState(false);

  const sendMessage = useCallback(
    async (metadataMsj) => {
      const normalizedMessage = {
        ...metadataMsj,
        message: metadataMsj.message || metadataMsj.message_text,
        seenAt: false,
      };

      // –°—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å PENDING —Å—Ç–∞—Ç—É—Å–æ–º
      setMessages((prev) => [...prev, normalizedMessage]);

      try {
        let apiUrl = api.messages.send.create;
        const normalizedPlatform = metadataMsj.platform?.toUpperCase?.();

        if (normalizedPlatform === "TELEGRAM") apiUrl = api.messages.send.telegram;
        else if (normalizedPlatform === "VIBER") apiUrl = api.messages.send.viber;
        else if (normalizedPlatform === "WHATSAPP") apiUrl = api.messages.send.whatsapp;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        const response = await apiUrl(metadataMsj);

        console.log("üì§ Server response:", response);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        const isSuccess = response?.status === "success" || response?.status === "ok";

        console.log("‚úÖ Message status check:", {
          responseStatus: response?.status,
          isSuccess,
          willUpdateTo: isSuccess ? "SUCCESS" : "ERROR"
        });

        if (isSuccess) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SUCCESS
          setMessages((prev) =>
            prev.map((msj) => getSendedMessage(msj, normalizedMessage, MESSAGES_STATUS.SUCCESS))
          );
        } else {
          // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ success, –æ—Å—Ç–∞–≤–ª—è–µ–º PENDING –∏–ª–∏ —Å—Ç–∞–≤–∏–º ERROR
          setMessages((prev) =>
            prev.map((msj) => getSendedMessage(msj, normalizedMessage, MESSAGES_STATUS.ERROR))
          );
        }
      } catch (error) {
        console.error("‚ùå Error sending message:", error);
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ API –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ ERROR
        setMessages((prev) =>
          prev.map((msj) => getSendedMessage(msj, normalizedMessage, MESSAGES_STATUS.ERROR))
        );
      }
    },
    [setMessages]
  );

  const handleScroll = useCallback(() => {
    const el = messageContainerRef.current;
    if (!el) return;
    const { scrollTop, scrollHeight, clientHeight } = el;
    setIsUserAtBottom(scrollHeight - scrollTop <= clientHeight + 50);
  }, []);

  // –£–¥–∞–ª–µ–Ω–æ: –¥—É–±–ª–∏—Ä—É—é—â–∏–π —ç—Ñ—Ñ–µ–∫—Ç, –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –≤—ã—à–µ

  useEffect(() => {
    const container = messageContainerRef.current;
    const contentEl = contentRef.current;
    if (!container || !contentEl) return;

    const ro = new ResizeObserver(() => {
      if (isUserAtBottom) {
        container.scrollTo({ top: container.scrollHeight });
      }
    });

    ro.observe(contentEl);
    return () => ro.disconnect();
  }, [isUserAtBottom]);

  useEffect(() => {
    const el = messageContainerRef.current;
    if (!el) return;
    el.addEventListener("scroll", handleScroll);
    return () => el.removeEventListener("scroll", handleScroll);
  }, [handleScroll]);

  useEffect(() => {
    if (!ticketId) return;
    getUserMessages(Number(ticketId));
    setNoteMode(false);
    setIsUserAtBottom(true); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∏–∫–µ—Ç–∞
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [ticketId]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π loading –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —á—Ç–æ –≤—Å–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–∏–ª–æ—Å—å
  useEffect(() => {
    // –°–∫—Ä–æ–ª–ª–∏–º –≤–Ω–∏–∑ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å—Ç—å
    if (!loading && !messagesLoading && messageContainerRef.current && ticketId && messages.length > 0) {
      // –¢—Ä–æ–π–Ω–æ–π requestAnimationFrame –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          requestAnimationFrame(() => {
            if (messageContainerRef.current) {
              const container = messageContainerRef.current;
              container.scrollTo({
                top: container.scrollHeight,
                behavior: 'auto', // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–æ–ª–ª–∞
              });
              setIsUserAtBottom(true);
            }
          });
        });
      });
    }
  }, [loading, messagesLoading, ticketId, messages.length]);
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑ –∫–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–Ω–∏–∑—É)
  useEffect(() => {
    if (isUserAtBottom && messageContainerRef.current && !loading) {
      messageContainerRef.current.scrollTo({
        top: messageContainerRef.current.scrollHeight,
        behavior: 'smooth',
      });
    }
  }, [messages.length, isUserAtBottom, loading]);

  // Stage 4: Only render messages when messagesReady
  const renderGroupedMessages = () => {
    if (ticketId && !loading && !messagesLoading && renderStage.messagesReady) {
      return (
        <GroupedMessages
          personalInfo={personalInfo}
          ticketId={ticketId}
          technicians={technicians}
          apiNotes={apiNotesFromCtx}
        />
      );
    }
    
    // Show placeholder while waiting for messages stage
    if (ticketId && !loading && !messagesLoading && !renderStage.messagesReady) {
      return (
        <Flex h="100%" align="center" justify="center">
          <Text size="sm" c="dimmed">Loading messages...</Text>
        </Flex>
      );
    }
    
    return null;
  };

  const renderMessagesContent = () => {
    if (messages.error) {
      return (
        <Flex h="100%" align="center" justify="center">
          <Text size="lg" c="red">{getLanguageByKey("loadMessagesError")}</Text>
        </Flex>
      );
    }
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π loading (—Å–æ–æ–±—â–µ–Ω–∏—è + –∫–æ–Ω—Ç–∞–∫—Ç—ã + –≤—ã–±–æ—Ä—ã)
    if (loading || messagesLoading) {
      return (
        <Flex h="100%" align="center" justify="center">
          <Spin />
        </Flex>
      );
    }

    if (ticketId) {
      return (
        <div ref={contentRef}>
          {renderGroupedMessages()}
        </div>
      );
    }

    return (
      <Flex h="100%" align="center" justify="center">
        <Text size="lg" c="dimmed">{getLanguageByKey("Alege lead")}</Text>
      </Flex>
    );
  };

  const handleToggleNoteComposer = useCallback(() => {
    setNoteMode((v) => !v);
  }, []);

  return (
    <Flex w="100%" h="100%" direction="column" className="chat-area">
      {ticketId && (
        <Paper p="8" style={{ margin: "12px 0px 12px 42px", flexShrink: 0 }}>
          <TicketParticipants ticketId={ticketId} currentUserId={Number(userId)} />
        </Paper>
      )}

      <Flex
        p="16"
        direction="column"
        className="chat-messages"
        ref={messageContainerRef}
        style={{ flex: 1, overflow: 'auto' }}
      >
        {renderMessagesContent()}
      </Flex>

      {ticketId && (
        <>
          {noteMode && !messagesLoading && (
            <div style={{ padding: 16, flexShrink: 0 }}>
              <InlineNoteComposer
                ticketId={ticketId}
                technicianId={Number(userId)}
                loading={noteSaving}
                onCancel={() => setNoteMode(false)}
                onSave={async () => {
                  setNoteSaving(true);
                  try {
                    await getUserMessages(Number(ticketId));
                    setNoteMode(false);
                  } finally {
                    setNoteSaving(false);
                  }
                }}
              />
            </div>
          )}

          {/* Stage 3: Render tasks only when tasksReady */}
          {renderStage.tasksReady && !messagesLoading && (
            <TaskListOverlay
              ticketId={ticketId}
              creatingTask={creatingTask}
              setCreatingTask={setCreatingTask}
            />
          )}

          <div style={{ flexShrink: 0 }}>
            <ChatInput
              loading={loading}
              id={ticketId}
              platformOptions={platformOptions}
              selectedPlatform={selectedPlatform}
              changePlatform={changePlatform}
              contactOptions={contactOptions}
              changeContact={changeContact}
              selectedPageId={selectedPageId}
              changePageId={changePageId}
              ticketId={ticketId}
              unseenCount={unseenCount}
              currentClient={selectedClient}
              personalInfo={personalInfo}
              onCreateTask={() => setCreatingTask(true)}
              onToggleNoteComposer={handleToggleNoteComposer}
              onSendMessage={(value) => {
                if (!selectedClient.payload) return;
                
                // –ü–æ–ª—É—á–∞–µ–º page_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏ group_title —Ç–∏–∫–µ—Ç–∞
                const pandaPageId = getPageIdByPlatformAndGroup(
                  selectedClient.payload.platform,
                  personalInfo?.group_title
                );
                
                sendMessage({
                  sender_id: Number(userId),
                  client_id: selectedClient.payload.client_id,
                  platform: selectedClient.payload.platform,
                  page_id: pandaPageId, // page_id Panda –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                  contact_value: selectedClient.payload.contact_value, // ID –∫–ª–∏–µ–Ω—Ç–∞ (–∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º)
                  ticket_id: ticketId,
                  time_sent: dayjs().format(YYYY_MM_DD_HH_mm_ss),
                  messageStatus: MESSAGES_STATUS.PENDING,
                  ...value,
                });
              }}
            />
          </div>
        </>
      )}
    </Flex>
  );
};

// Export without memo - we use loading overlay to hide all renders until ready
// This is simpler and more reliable than trying to optimize individual renders
export const ChatMessages = ChatMessagesComponent;
