'workflow' => ['table' => 't.', 'type' => 'array_string'],
        'priority' => ['table' => 't.', 'type' => 'array_string'],
        'contact' => ['table' => 't.', 'type' => 'string'],
        'tags' => ['table' => 't.', 'type' => 'array_string'],
        'technician_id' => ['table' => 't.', 'type' => 'array_string'],

        'data_plecarii' => ['table' => 'ti.', 'type' => 'date_range'],
        'data_venit_in_oficiu' => ['table' => 'ti.', 'type' => 'date_range'],
        'data_intoarcerii' => ['table' => 'ti.', 'type' => 'date_range'],
        'data_cererii_de_retur' => ['table' => 'ti.', 'type' => 'date_range'],
        'buget' => ['table' => 'ti.', 'type' => 'number_range'],
        'sursa_lead' => ['table' => 'ti.', 'type' => 'string'],
        'promo' => ['table' => 'ti.', 'type' => 'string'],
        'tara' => ['table' => 'ti.', 'type' => 'string'],
        'tipul_serviciului' => ['table' => 'ti.', 'type' => 'string'],
        'tip_de_transport' => ['table' => 'ti.', 'type' => 'string'],
        'denumirea_excursiei_turului' => ['table' => 'ti.', 'type' => 'string'],
        'procesarea_achizitionarii' => ['table' => 'ti.', 'type' => 'string'],
        'marketing' => ['table' => 'ti.', 'type' => 'string'],
        'data_contractului' => ['table' => 'ti.', 'type' => 'date_range'],
        'data_avansului' => ['table' => 'ti.', 'type' => 'date_range'],
        'data_de_plata_integrala' => ['table' => 'ti.', 'type' => 'date_range'],
        'contract_trimis' => ['table' => 'ti.', 'type' => 'bool'],
        'contract_semnat' => ['table' => 'ti.', 'type' => 'bool'],
        'achitare_efectuata' => ['table' => 'ti.', 'type' => 'bool'],
        'rezervare_confirmata' => ['table' => 'ti.', 'type' => 'bool'],
        'contract_arhivat' => ['table' => 'ti.', 'type' => 'bool'],
        'control_admin' => ['table' => 'ti.', 'type' => 'bool'],
        'avans_euro' => ['table' => 'ti.', 'type' => 'number_range'],
        'achitat_client' => ['table' => 'ti.', 'type' => 'number_range'],
        'pret_netto' => ['table' => 'ti.', 'type' => 'number_range'],
        'numar_de_contract' => ['table' => 'ti.', 'type' => 'string'],
        'tour_operator' => ['table' => 'ti.', 'type' => 'string'],
        'numarul_cererii_de_la_operator' => ['table' => 'ti.', 'type' => 'string'],
        'statutul_platii' => ['table' => 'ti.', 'type' => 'string'],
        'f_serviciu' => ['table' => 'ti.', 'type' => 'string'],
        'f_nr_factura' => ['table' => 'ti.', 'type' => 'string'],
        'f_numarul' => ['table' => 'ti.', 'type' => 'string'],
        'f_pret' => ['table' => 'ti.', 'type' => 'number_range'],
        'f_suma' => ['table' => 'ti.', 'type' => 'number_range'],
        'f_valuta_contului' => ['table' => 'ti.', 'type' => 'string'],
        'iban' => ['table' => 'ti.', 'type' => 'string'],
        'motivul_refuzului' => ['table' => 'ti.', 'type' => 'string'],
        'evaluare_de_odihna' => ['table' => 'ti.', 'type' => 'string'],
        'urmatoarea_vacanta' => ['table' => 'ti.', 'type' => 'string'],
        'manager' => ['table' => 'ti.', 'type' => 'string'],
        'vacanta' => ['table' => 'ti.', 'type' => 'string'],
case 'bool':
                    $boolVal = filter_var($value, FILTER_VALIDATE_BOOLEAN);
                    $queryBuilder->andWhere("$column = :$key")
                        ->setParameter($key, $boolVal);
                    break;

                case 'int':
                    $queryBuilder->andWhere("$column = :$key")
                        ->setParameter($key, (int)$value);
                    break;

                case 'number_range':
                    if (isset($value['from'])) {
                        $queryBuilder->andWhere("CAST($column AS DECIMAL) >= :{$key}_min")
                            ->setParameter("{$key}_min", (float)$value['from']);
                    }
                    if (isset($value['to'])) {
                        $queryBuilder->andWhere("CAST($column AS DECIMAL) <= :{$key}_max")
                            ->setParameter("{$key}_max", (float)$value['to']);
                    }
                    break;

                case 'date_range':
                    if (isset($value['from'])) {
                        $from = $this->parseDate($value['from']);
                        if ($from) {
                            $queryBuilder->andWhere("$column >= :{$key}_after")
                                ->setParameter("{$key}_after", $from->format('Y-m-d'));
                        }
                    }
                    if (isset($value['to'])) {
                        $to = $this->parseDate($value['to']);
                        if ($to) {
                            $queryBuilder->andWhere("$column <= :{$key}_before")
                                ->setParameter("{$key}_before", $to->format('Y-m-d'));
                        }
                    }
                    break;

                case 'array_string':
                    if (is_array($value) && !empty($value)) {
                        $queryBuilder->andWhere($queryBuilder->expr()->in($column, ":{$key}_arr"))
                            ->setParameter("{$key}_arr", $value, Connection::PARAM_STR_ARRAY);
                    }
                    break;

                case 'string':
                default:
                    $queryBuilder->andWhere("LOWER($column) LIKE LOWER(:$key)")
                        ->setParameter($key, '%' . $value . '%');
                    break;